const express = require('express');
const router = express.Router();
const SingleMeet = require('../models/SingleMeet');
const bot = require('../bot'); // üëà —Ç–≤–æ–π telegraf-–±–æ—Ç, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π –∫–∞–∫ –Ω–∞–¥–æ

router.post('/single/create', async (req, res) => {
  const {
    telegramId,
    gender,
    time,
    location,
    minAge,
    maxAge,
    minWeight,
    maxWeight,
  } = req.body;

  if (!telegramId || !time || !location) {
    return res.json({ error: '‚õî –¢—Ä–µ–±—É—é—Ç—Å—è telegramId, time –∏ location' });
  }

  const existingMeet = await SingleMeet.findOne({
    creator: telegramId,
    status: 'open',
  });

  if (existingMeet) {
    return res.json({ error: '‚õî –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞' });
  }

  try {
    const meet = await SingleMeet.create({
      creator: telegramId,
      gender,
      time,
      location,
      minAge,
      maxAge,
      minWeight,
      maxWeight,
    });

    res.json({ status: '‚úÖ –í—Å—Ç—Ä–µ—á–∞ —Å–æ–∑–¥–∞–Ω–∞', meet });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏:', err);
    res.status(500).send('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

router.post('/single/apply', async (req, res) => {
  const { meetingId, telegramId } = req.body;

  if (!meetingId || !telegramId) {
    return res.json({ error: '‚õî –ù—É–∂–Ω—ã meetingId –∏ telegramId' });
  }

  try {
    const meet = await SingleMeet.findById(meetingId);
    if (!meet) {
      return res.json({ error: '‚õî –í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    if (meet.creator === telegramId) {
      return res.json({ error: '‚õî –ù–µ–ª—å–∑—è –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ —Å–≤–æ—é –≤—Å—Ç—Ä–µ—á—É' });
    }

    const user = await User.findOne({ telegramId });
    const name = user?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    await bot.telegram.sendMessage(
      meet.creator,
      `üë§ ${name} (${telegramId}) —Ö–æ—á–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ –≤—Å—Ç—Ä–µ—á–µ\nüìç ${meet.location}\nüìÖ ${new Date(meet.time).toLocaleString()}`
    );

    res.json({ status: '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
    res.json({ error: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' });
  }
});

router.get('/single/all', async (req, res) => {
  try {
    const meets = await SingleMeet.find({ status: 'open' }).sort({ time: 1 });
    res.json(meets);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á:', err);
    res.status(500).send('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

module.exports = router;
