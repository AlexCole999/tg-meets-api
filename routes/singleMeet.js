const express = require('express');
const router = express.Router();
const SingleMeet = require('../models/SingleMeet');
const User = require('../models/User');
const bot = require('../bot'); // üëà —Ç–≤–æ–π telegraf-–±–æ—Ç, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π –∫–∞–∫ –Ω–∞–¥–æ

router.post('/single/create', async (req, res) => {
  const {
    telegramId,
    gender,
    time,
    location,
    minAge,
    maxAge,
    minWeight,
    maxWeight,
  } = req.body;

  if (!telegramId || !time || !location) {
    return res.json({ error: '‚õî –¢—Ä–µ–±—É—é—Ç—Å—è telegramId, time –∏ location' });
  }

  const existingMeet = await SingleMeet.findOne({
    creator: telegramId,
    status: 'open',
  });

  if (existingMeet) {
    return res.json({ error: '‚õî –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞' });
  }

  try {
    const meet = await SingleMeet.create({
      creator: telegramId,
      gender,
      time,
      location,
      minAge,
      maxAge,
      minWeight,
      maxWeight,
    });

    res.json({ status: '‚úÖ –í—Å—Ç—Ä–µ—á–∞ —Å–æ–∑–¥–∞–Ω–∞', meet });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏:', err);
    res.status(500).send('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

router.post('/single/apply', async (req, res) => {
  const { meetingId, telegramId } = req.body;

  if (!meetingId || !telegramId) {
    return res.json({ error: '‚õî –ù—É–∂–Ω—ã meetingId –∏ telegramId' });
  }

  try {
    const meet = await SingleMeet.findById(meetingId);
    if (!meet) {
      return res.json({ error: '‚õî –í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    if (String(meet.creator) === String(telegramId)) {
      return res.json({ error: '‚õî –ù–µ–ª—å–∑—è –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ —Å–≤–æ—é –≤—Å—Ç—Ä–µ—á—É' });
    }

    const alreadyCandidate = meet.candidates.some(
      (c) => String(c.telegramId) === String(telegramId)
    );

    if (alreadyCandidate) {
      return res.json({ error: '‚õî –í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç—É –≤—Å—Ç—Ä–µ—á—É' });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
    meet.candidates.push({
      telegramId: String(telegramId),
      status: 'pending',
    });

    await meet.save();

    const user = await User.findOne({ telegramId });
    const name = user?.name || '–ë–µ–∑ –∏–º–µ–Ω–∏';

    await bot.telegram.sendMessage(
      meet.creator,
      `üë§ ${name} (${telegramId}) —Ö–æ—á–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ –≤—Å—Ç—Ä–µ—á–µ\nüìç ${meet.location}\nüìÖ ${new Date(meet.time).toLocaleString()}`
    );

    res.json({ status: '‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
    res.json({ error: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' });
  }
});

// router.get('/single/all', async (req, res) => {
//   try {
//     const meets = await SingleMeet.find({ status: 'open' }).sort({ time: 1 });

//     // —Å–æ–±–µ—Ä—ë–º –≤—Å–µ creatorId
//     const creatorIds = meets.map(m => m.creator);
//     const uniqueCreatorIds = [...new Set(creatorIds)];

//     // –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π
//     const creators = await User.find({ telegramId: { $in: uniqueCreatorIds } });
//     const creatorMap = Object.fromEntries(creators.map(u => [u.telegramId, u.toObject()]));

//     // –¥–æ–±–∞–≤–ª—è–µ–º creatorProfile –≤ –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–µ—á–∏
//     const result = meets.map(m => {
//       const meetObj = m.toObject();
//       return {
//         ...meetObj,
//         creatorProfile: creatorMap[meetObj.creator] || null,
//       };
//     });

//     res.json(result);
//   } catch (err) {
//     console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á:', err);
//     res.status(500).json({ error: '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
//   }
// });

router.get('/single/all', async (req, res) => {
  try {
    const { gender, minAge, maxAge } = req.query;

    // –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
    let query = { status: 'open' };

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É
    if (gender && gender !== 'any') {
      query.gender = gender;
    }

    // –§–∏–ª—å—Ç—Ä—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É —á–µ—Ä–µ–∑ $and
    const andConditions = [];

    if (minAge) {
      andConditions.push({
        $or: [
          { minAge: null },
          { minAge: { $gte: Number(minAge) } }
        ]
      });
    }

    if (maxAge) {
      andConditions.push({
        $or: [
          { maxAge: null },
          { maxAge: { $lte: Number(maxAge) } }
        ]
      });
    }

    if (andConditions.length > 0) {
      query.$and = andConditions;
    }

    console.log('üì• –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å—Ç—Ä–µ—á:', JSON.stringify(query, null, 2));

    // –ò—â–µ–º –≤—Å—Ç—Ä–µ—á–∏
    const meets = await SingleMeet.find(query).sort({ time: 1 });

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π
    const creatorIds = meets.map(m => m.creator);
    const creators = await User.find({ telegramId: { $in: creatorIds } });
    const creatorMap = Object.fromEntries(creators.map(u => [u.telegramId, u.toObject()]));

    // –î–æ–±–∞–≤–ª—è–µ–º creatorProfile
    const result = meets.map(m => ({
      ...m.toObject(),
      creatorProfile: creatorMap[m.creator] || null,
    }));

    res.json(result);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤—Å—Ç—Ä–µ—á:', err);
    res.status(500).json({ error: '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});


module.exports = router;
