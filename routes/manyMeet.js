const express = require('express');
const router = express.Router();
const ManyMeet = require('../models/ManyMeet');
const User = require('../models/User');
const bot = require('../bot');

// ‚úÖ /many/create
router.post('/many/create', async (req, res) => {
  const {
    telegramId,
    gender,
    time,
    location,
    minAge,
    maxAge,
    maxParticipants,
  } = req.body;

  if (!telegramId || !time || !location || !maxParticipants || maxParticipants < 2) {
    return res.json({ error: '‚õî –¢—Ä–µ–±—É—é—Ç—Å—è telegramId, time, location –∏ min 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞' });
  }

  try {
    const meet = await ManyMeet.create({
      creator: telegramId,
      gender,
      time,
      location,
      minAge,
      maxAge,
      maxParticipants,
    });

    res.json({ status: '‚úÖ –í—Å—Ç—Ä–µ—á–∞ —Å–æ–∑–¥–∞–Ω–∞', meet });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏:', err);
    res.status(500).send('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

// ‚úÖ /many/apply
router.post('/many/apply', async (req, res) => {
  const { meetingId, telegramId } = req.body;

  if (!meetingId || !telegramId) {
    return res.json({ error: '‚õî –ù—É–∂–Ω—ã meetingId –∏ telegramId' });
  }

  try {
    const meet = await ManyMeet.findById(meetingId);
    if (!meet) return res.json({ error: '‚õî –í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

    if (String(meet.creator) === String(telegramId)) {
      return res.json({ error: '‚õî –ù–µ–ª—å–∑—è –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ —Å–≤–æ—é –≤—Å—Ç—Ä–µ—á—É' });
    }

    const alreadyCandidate = meet.candidates.some(
      (c) => String(c.telegramId) === String(telegramId)
    );
    if (alreadyCandidate) {
      return res.json({ error: '‚õî –í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç—É –≤—Å—Ç—Ä–µ—á—É' });
    }

    const acceptedCount = meet.candidates.filter(c => c.status === 'accepted').length;
    if (acceptedCount >= meet.maxParticipants) {
      return res.json({ error: '‚õî –í—Å—Ç—Ä–µ—á–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞' });
    }

    meet.candidates.push({ telegramId: String(telegramId), status: 'pending' });
    await meet.save();

    const user = await User.findOne({ telegramId });
    const name = user?.name || '–ë–µ–∑ –∏–º–µ–Ω–∏';

    await bot.telegram.sendMessage(
      meet.creator,
      `üë§ ${name} (${telegramId}) —Ö–æ—á–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ –≤—Å—Ç—Ä–µ—á–µ (–º–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)\nüìç ${meet.location}\nüìÖ ${new Date(meet.time).toLocaleString()}`
    );

    res.json({ status: '‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏:', err);
    res.json({ error: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' });
  }
});

// ‚úÖ /many/accept
router.post('/many/accept', async (req, res) => {
  const { meetId, telegramId } = req.body;

  try {
    const meet = await ManyMeet.findById(meetId);
    if (!meet) return res.json({ error: '‚õî –í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

    const acceptedCount = meet.candidates.filter(c => c.status === 'accepted').length;
    if (acceptedCount >= meet.maxParticipants) {
      return res.json({ error: '‚õî –ú–µ—Å—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç' });
    }

    await bot.telegram.sendMessage(
      telegramId,
      `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É\nüìç ${meet.location}\nüìÖ ${new Date(meet.time).toLocaleString()}\n–ø—Ä–∏–Ω—è—Ç–∞.`
    );

    res.json({ status: '‚úÖ –ü—Ä–∏–Ω—è—Ç' });
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏:', e);
    res.json({ error: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' });
  }
});

// ‚úÖ /many/reject
router.post('/many/reject', async (req, res) => {
  const { meetId, telegramId } = req.body;

  try {
    const meet = await ManyMeet.findById(meetId);
    if (!meet) return res.json({ error: '‚õî –í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

    await bot.telegram.sendMessage(
      telegramId,
      `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É\nüìç ${meet.location}\nüìÖ ${new Date(meet.time).toLocaleString()}\n–±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`
    );

    res.json({ status: '‚úÖ –û—Ç–∫–ª–æ–Ω—ë–Ω' });
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏:', e);
    res.json({ error: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' });
  }
});

// ‚úÖ /many/delete
router.post('/many/delete', async (req, res) => {
  const { meetingId } = req.body;

  if (!meetingId) return res.json({ error: '‚õî –ù–µ —É–∫–∞–∑–∞–Ω meetingId' });

  try {
    await ManyMeet.findByIdAndDelete(meetingId);
    res.json({ status: '‚úÖ –£–¥–∞–ª–µ–Ω–æ' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏:', err);
    res.json({ error: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏' });
  }
});

// ‚úÖ /many/mine
router.post('/many/mine', async (req, res) => {
  const { telegramId } = req.body;

  try {
    const meets = await ManyMeet.find({ creator: telegramId });

    const allCandidateIds = meets.flatMap(m =>
      m.candidates
        .filter(c => c.status !== 'rejected')
        .map(c => c.telegramId)
    );

    const uniqueIds = [...new Set(allCandidateIds)];
    const users = await User.find({ telegramId: { $in: uniqueIds } });
    const userMap = Object.fromEntries(users.map(u => [u.telegramId, u.toObject()]));

    const result = meets.map(m => {
      const visibleCandidates = m.candidates
        .filter(c => c.status !== 'rejected')
        .map(c => ({
          ...c.toObject(),
          ...userMap[c.telegramId],
        }));

      return {
        ...m.toObject(),
        candidateProfiles: visibleCandidates,
      };
    });

    res.json({ meetings: result });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// ‚úÖ /many/all
router.get('/many/all', async (req, res) => {
  try {
    const meets = await ManyMeet.find({ status: 'open' }).sort({ time: 1 });
    res.json(meets);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á:', err);
    res.status(500).send('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

module.exports = router;
