const express = require('express');
const router = express.Router();
const User = require('../models/User');
const SingleMeet = require('../models/SingleMeet');
const bot = require('../bot'); // üëà —Ç–≤–æ–π telegraf-–±–æ—Ç, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π –∫–∞–∫ –Ω–∞–¥–æ

// üîê /auth ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/auth', async (req, res) => {
  const { telegramId, gender, age, height, weight, city, photos } = req.body;

  if (!telegramId) return res.status(400).send('‚õî –ù–µ –ø–µ—Ä–µ–¥–∞–Ω telegramId');

  try {
    let user = await User.findOne({ telegramId });
    let status;

    if (!user) {
      user = await User.create({
        telegramId,
        gender: gender || '',
        age: age || 0,
        height: height || 0,
        weight: weight || 0,
        city: city || '',
        photos: Array.isArray(photos) ? photos.slice(0, 3) : [null, null, null],
      });
      status = '–¥–æ–±–∞–≤–ª–µ–Ω';
    } else {
      status = '–∑–∞–≥—Ä—É–∂–µ–Ω';
    }

    res.json({ user, status });
  } catch (err) {
    console.error('‚ùå /auth –æ—à–∏–±–∫–∞:', err);
    res.status(500).send('‚ùå –°–µ—Ä–≤–µ—Ä —Å–ª–æ–º–∞–ª—Å—è');
  }
});

// ‚úèÔ∏è /profileEdit ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
router.post('/profileEdit', async (req, res) => {
  const { telegramId, ...updateFields } = req.body;

  if (!telegramId) return res.status(400).send('‚õî –ù–µ –ø–µ—Ä–µ–¥–∞–Ω telegramId');

  try {
    const updatedUser = await User.findOneAndUpdate(
      { telegramId },
      { $set: updateFields },
      { new: true }
    );

    if (!updatedUser) return res.status(404).send('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    res.json({ status: '–æ–±–Ω–æ–≤–ª—ë–Ω', user: updatedUser });
  } catch (err) {
    console.error('‚ùå /profileEdit –æ—à–∏–±–∫–∞:', err);
    res.status(500).send('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

router.post('/single/myCreatedMeets', async (req, res) => {
  const { telegramId } = req.body;

  try {
    const meets = await SingleMeet.find({ creator: telegramId });

    // –°–±–æ—Ä –≤—Å–µ—Ö telegramId (–∫—Ä–æ–º–µ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö)
    const allCandidateIds = meets.flatMap(m =>
      m.candidates
        .filter(c => c.status !== 'rejected') // ‚ùóÔ∏è –≤–æ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        .map(c => c.telegramId)
    );

    const uniqueIds = [...new Set(allCandidateIds)];
    const users = await User.find({ telegramId: { $in: uniqueIds } });

    const userMap = Object.fromEntries(users.map(u => [u.telegramId, u.toObject()]));

    const result = meets.map(m => {
      const visibleCandidates = m.candidates
        .filter(c => c.status !== 'rejected') // üîÅ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç—É—Ç —Ç–æ–∂–µ
        .map(c => ({
          ...c.toObject(),
          ...userMap[c.telegramId], // –º–æ–∂–µ—Ç –±—ã—Ç—å undefined ‚Äî —ç—Ç–æ –æ–∫
        }));

      return {
        ...m.toObject(),
        candidateProfiles: visibleCandidates,
      };
    });

    res.json({ meetings: result });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.post('/single/accept', async (req, res) => {
  const { meetId, telegramId } = req.body;

  if (!meetId || !telegramId) {
    return res.status(400).json({ error: '‚õî –ù—É–∂–Ω—ã meetId –∏ telegramId' });
  }

  try {
    const meet = await SingleMeet.findById(meetId);
    if (!meet) {
      return res.json({ error: '‚õî –í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞/–æ—Ç–º–µ–Ω–µ–Ω–∞
    if (meet.status !== 'open') {
      return res.json({ error: '‚õî –í—Å—Ç—Ä–µ—á–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞' });
    }

    // –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    meet.candidates = meet.candidates.map(c => ({
      ...c.toObject(),
      status: c.telegramId === String(telegramId) ? 'accepted' : 'rejected'
    }));

    // —Å—Ç–∞–≤–∏–º –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å—Ç—Ä–µ—á—É
    meet.acceptedCandidate = telegramId;
    meet.status = 'closed';

    await meet.save();

    // —É–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–Ω—è—Ç–æ–≥–æ
    try {
      await bot.telegram.sendMessage(
        telegramId,
        `‚úÖ –í–∞—Å –ø—Ä–∏–Ω—è–ª–∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É!\nüìç ${meet.location}\nüìÖ ${new Date(meet.time).toLocaleString()}`
      );
    } catch (err) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç–æ–º—É:', err.message);
      // —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –Ω–æ –±–∞–∑–∞ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚Äì —ç—Ç–æ –æ–∫
    }

    res.json({ status: '‚úÖ –ü—Ä–∏–Ω—è—Ç' });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', err);
    res.status(500).json({ error: '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.post('/single/reject', async (req, res) => {
  const { meetId, telegramId } = req.body;

  if (!meetId || !telegramId) {
    return res.status(400).json({ error: '‚õî –ù—É–∂–Ω—ã meetId –∏ telegramId' });
  }

  try {
    const meet = await SingleMeet.findById(meetId);
    if (!meet) {
      return res.json({ error: '‚õî –í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞/–æ—Ç–º–µ–Ω–µ–Ω–∞
    if (meet.status !== 'open') {
      return res.json({ error: '‚õî –í—Å—Ç—Ä–µ—á–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞' });
    }

    // –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    meet.candidates = meet.candidates.map(c =>
      c.telegramId === String(telegramId)
        ? { ...c.toObject(), status: 'rejected' }
        : c.toObject()
    );

    await meet.save();

    // —É–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω–æ–≥–æ
    try {
      await bot.telegram.sendMessage(
        telegramId,
        `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É\nüìç ${meet.location}\nüìÖ ${new Date(meet.time).toLocaleString()}\n–±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`
      );
    } catch (err) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω–æ–º—É:', err.message);
      // –¥–∞–∂–µ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É—à–ª–æ, –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã
    }

    res.json({ status: '‚úÖ –û—Ç–∫–ª–æ–Ω—ë–Ω' });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', err);
    res.status(500).json({ error: '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.post('/single/myAcceptedMeets', async (req, res) => {
  const { telegramId } = req.body;

  if (!telegramId) {
    return res.status(400).json({ error: '‚õî –ù—É–∂–µ–Ω telegramId' });
  }

  try {
    // –ò—â–µ–º –≤—Å—Ç—Ä–µ—á–∏, –≥–¥–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è—Ç
    const meets = await SingleMeet.find({
      acceptedCandidate: telegramId
    }).sort({ time: 1 });

    res.json({ meetings: meets });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã—Ö –≤—Å—Ç—Ä–µ—á:', err);
    res.status(500).json({ error: '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.post('/single/delete', async (req, res) => {
  const { meetingId } = req.body;

  if (!meetingId) return res.json({ error: '‚õî –ù–µ —É–∫–∞–∑–∞–Ω meetingId' });

  try {
    await SingleMeet.findByIdAndDelete(meetingId);
    res.json({ status: '‚úÖ –£–¥–∞–ª–µ–Ω–æ' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏:', err);
    res.json({ error: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏' });
  }
});


module.exports = router;